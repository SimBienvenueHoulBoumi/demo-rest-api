/**
 * üõ†Ô∏è Pipeline Jenkins complet pour un projet Java Spring Boot.
 * Ce pipeline est ex√©cut√© sur un agent nomm√© 'jenkins-agent' et utilise Maven et JDK.
 *
 * Objectifs :
 * - Compiler l'application
 * - Lancer les tests
 * - V√©rifier le style de code
 * - Analyser la qualit√© avec SonarQube
 * - Scanner les d√©pendances avec Snyk
 */
pipeline {

    /** 
     * üéØ Sp√©cifie sur quel agent Jenkins ce pipeline doit s'ex√©cuter.
     * 'jenkins-agent' est un nom logique, d√©fini dans la configuration Jenkins.
     */
    agent { label 'jenkins-agent' }

    /**
     * üîß Outils n√©cessaires pour les √©tapes suivantes du pipeline.
     * Ils doivent √™tre install√©s et configur√©s dans Jenkins (Manage Jenkins > Global Tool Configuration).
     */
    tools {
        jdk 'jdk'         // Java Development Kit (version 17)
        maven 'maven'     // Apache Maven (version 3.9)
    }

    /**
     * üåç Variables d‚Äôenvironnement utilis√©es dans certaines √©tapes du pipeline.
     * Elles pointent vers des outils ou configurations pr√©alablement d√©finis dans Jenkins.
     */
    environment {
        SONARSERVER = 'sonarserver'         // üîç Nom du serveur SonarQube configur√© dans Jenkins
        SONARSCANNER = 'sonarscanner'       // üîç Scanner CLI SonarQube configur√© dans Jenkins
        SNYK = 'snyk'                       // üõ°Ô∏è Nom de l'installation Snyk (scanner de vuln√©rabilit√©s)
        BUILD_ID = "0.0.1"                  // üèóÔ∏è ID unique du build Jenkins, utilis√© pour taguer l'image Docker
        // Configuration de la m√©moire allou√©e √† Maven
        MAVEN_OPTS = "-Xmx1024m"                // Limite la m√©moire utilis√©e par Maven
    }

    /* [5] OPTIONS GLOBALES
     
    Configuration du comportement du pipeline*/
    options {
        // Nettoie le workspace avant chaque build
        skipDefaultCheckout(false)// Limite le nombre de builds gard√©s
        buildDiscarder(logRotator(numToKeepStr: '5'))// Timeout global du pipeline
        timeout(time: 30, unit: 'MINUTES')// Horodatage des logs
        timestamps() 
     }

    /**
     * üì¶ D√©but des √©tapes du pipeline (appel√©es "stages").
     * Chaque stage ex√©cute une t√¢che sp√©cifique dans le cycle de vie CI/CD.
     */
    stages {

        /**
         * üì• √âtape de r√©cup√©ration du code source depuis le d√©p√¥t Git.
         * Jenkins utilise automatiquement l'URL du d√©p√¥t configur√©e dans le job.
         */
        stage('üì• Checkout') {
            steps {
                checkout scm
            }
        }

        /**
         * üõ†Ô∏è √âtape pour g√©n√©rer un Maven Wrapper si jamais il est absent.
         * Le Maven Wrapper permet d‚Äôutiliser la bonne version de Maven m√™me si elle n‚Äôest pas install√©e localement.
         */
        stage('üõ†Ô∏è G√©n√©rer Maven Wrapper si absent') {
            steps {
                sh '''
                    if [ ! -f "./mvnw" ] || [ ! -f "./.mvn/wrapper/maven-wrapper.properties" ]; then
                        echo "‚û° Maven Wrapper manquant. G√©n√©ration..."
                        mvn -N io.takari:maven:wrapper
                    else
                        echo "‚úÖ Maven Wrapper d√©j√† pr√©sent."
                    fi
                '''
            }
        }

        /**
         * üîß √âtape de compilation du code source Java avec Maven.
         * Les tests sont ignor√©s ici pour se concentrer sur la construction (build).
         */
        stage('üîß Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo "‚úÖ Build r√©ussi - Archivage des artefacts..."
                    archiveArtifacts artifacts: 'target/*.jar' // üì¶ Sauvegarde du fichier .jar g√©n√©r√©
                }
            }
        }

        /**
         * üß™ √âtape d‚Äôex√©cution des tests unitaires avec Maven.
         * Les r√©sultats seront utilis√©s plus tard pour SonarQube.
         */
        stage('üß™ Tests') {
            steps {
                sh 'mvn test'
            }
        }

        /**
         * üßπ √âtape pour v√©rifier la qualit√© du code avec Checkstyle.
         * Cela d√©tecte des erreurs de style comme des noms de classes incorrects ou des indentations non conformes.
         */
        stage('üßπ Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        /**
         * üìä √âtape d‚Äôanalyse de qualit√© de code avec SonarQube.
         * Envoie les r√©sultats de build, de test, de couverture et de checkstyle √† SonarQube.
         */
        stage('üìä SonarQube Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}" // üõ†Ô∏è R√©cup√®re le chemin d‚Äôinstallation du scanner
            }
            steps {
                withSonarQubeEnv("${SONARSERVER}") {
                    sh """${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=demo-rest-api \
                        -Dsonar.projectName=demo-rest-api \
                        -Dsonar.projectVersion=0.0.1 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/simdev/demo/services \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco/jacoco.xml \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml"""
                }
            }
        }

        /**
         * üîê √âtape de scan des d√©pendances avec Snyk.
         * Permet de d√©tecter les failles de s√©curit√© dans les biblioth√®ques tierces utilis√©es dans le projet.
         */
        stage('Snyk Dependency Scan') {
            steps {
                snykSecurity (
                    severity: 'high',                         // üö® Niveau de menace minimum : high, medium, low
                    snykInstallation: "${SNYK}",              // üîß Nom d√©fini dans Jenkins pour Snyk CLI
                    snykTokenId: 'snyk-token',                // üîë ID de la cl√© d'API Snyk (stock√©e dans Jenkins Credentials)
                    targetFile: 'pom.xml',                    // üìÑ Fichier principal pour Maven
                    monitorProjectOnBuild: true,              // üì° Envoi automatique des r√©sultats sur Snyk.io
                    failOnIssues: false,                       // ‚ùå √âchoue le pipeline en cas de vuln√©rabilit√©s
                    additionalArguments: '--report --format=html --report-file=snyk_report.html' // üìÉ G√©n√®re un rapport HTML
                ) 
            } 
        }

        /**
            * üì¶ √âtape de construction de l'image Docker.
            * Cette √©tape transforme l'application compil√©e en une image Docker ex√©cutable.
            * üîπ Docker doit √™tre install√© sur l'agent Jenkins et accessible dans le PATH.
            * üîπ Le fichier 'Dockerfile' √† la racine du projet d√©finit comment l‚Äôimage est construite.
            *
            * Pourquoi c'est utile :
            * - Pour rendre l'application portable : elle peut √™tre ex√©cut√©e sur n'importe quel serveur Docker.
            * - Pour automatiser le d√©ploiement : l'image peut √™tre pouss√©e vers un registre Docker puis d√©ploy√©e.
            *
            * Exemple d'image produite : demo-rest-api:0.0.1
         */
        stage('üì¶ Build Docker Image') {
            steps {
                script {
                    def imageName = "demo-rest-api:${BUILD_ID}" // üîñ Nom complet de l‚Äôimage Docker (ex: demo-rest-api:0.0.1)
                    // üê≥ Commande pour construire l‚Äôimage √† partir du Dockerfile
                    sh "docker build -t ${imageName} ."

                    env.DOCKER_IMAGE = imageName 
                    
                    // ‚úÖ Message pour confirmer que l‚Äôimage est bien construite
                    echo "Docker image built: ${imageName}"
                }
            }
        }

            /**
         * üîç √âtape de scan de l'image Docker avec Trivy.
         * Trivy est un outil de s√©curit√© qui identifie les vuln√©rabilit√©s dans les images Docker (OS + biblioth√®ques).
         * L'analyse est effectu√©e via une API HTTP expos√©e par le conteneur Trivy (en mode serveur).
         *
         * Conditions :
         * - Le conteneur Trivy doit √™tre actif, sur le m√™me r√©seau que Jenkins, et √©couter sur le port 4954.
         * - L'image Docker doit d√©j√† √™tre construite et pr√©sente localement sur l‚Äôh√¥te.
         *
         * Objectifs :
         * - Automatiser l‚Äôanalyse de s√©curit√© √† chaque build.
         * - G√©n√©rer un rapport de vuln√©rabilit√©s (JSON) stock√© dans Jenkins.
         */
        stage('üîç Scan Trivy') {
            steps {
                script {
                    echo "‚è≥ Attente que Trivy soit pr√™t..."
                    sh "sleep 10"

                    echo "üì° Scan de l'image ${env.DOCKER_IMAGE} avec Trivy..."
                    sh """
                        curl -s -X POST ${env.TRIVY_URL} \\
                        -H 'Content-Type: application/json' \\
                        -d '{
                            "image_name": "${env.DOCKER_IMAGE}",
                            "scan_type": "image",
                            "vuln_type": ["os", "library"],
                            "severity": ["CRITICAL", "HIGH", "MEDIUM"]
                        }' > trivy-report.json
                    """

                    echo "üìÑ Rapport Trivy g√©n√©r√© avec succ√®s"
                    archiveArtifacts artifacts: 'trivy-report.json'
                }
            }
        }

    }
}



